@inproceedings{NY2016,
  author = {Nicholas Ng and Nobuko Yoshida},
  title = {{Static Deadlock Detection for Concurrent Go by Global Session Graph Synthesis}},
  booktitle = {25th International Conference on Compiler Construction},
  pages = {174--184},
  publisher = {ACM},
  doi = "10.1145/2892208.2892232",
  year = 2016
}

@inproceedings{LNTY2017,
  author = {Julien Lange and Nicholas Ng and Bernardo Toninho and Nobuko Yoshida},
  title = {{Fencing off Go: Liveness and Safety for Channel-based Programming}},
  booktitle = {44th ACM SIGPLAN Symposium on Principles of Programming Languages},
  pages = {748--761},
  publisher = {ACM},
  doi = "10.1145/3009837.3009847",
  year = 2017
}

@inproceedings{LNTY2018,
  author = {Julien Lange and Nicholas Ng and Bernardo Toninho and Nobuko Yoshida},
  title = {{A Static Verification Framework for Message Passing in Go using Behavioural Types}},
  booktitle = {40th International Conference on Software Engineering},
  pages = {1137--1148},
  publisher = {ACM},
  doi = "10.1145/3180155.3180157",
  year = 2018
}

@inproceedings{manna.90,
    author = {Zohar Manna and Amir Pnueli},
    year = {1990},
    title = {A hierarchy of temporal properties},
    booktitle = {Proceedings of the sixth annual ACM Symposium on
                    Principles of distributed computing (PODC'90)},
    location = {Quebec City, Canada},
    pages = {377--410},
    publisher = {ACM},
    address  = {New York, NY, USA}
}

@Inbook{Clarke2012,
author="Clarke, Edmund M.
and Klieber, William
and Nov{\'a}{\v{c}}ek, Milo{\v{s}}
and Zuliani, Paolo",
editor="Meyer, Bertrand
and Nordio, Martin",
title="Model Checking and the State Explosion Problem",
bookTitle="Tools for Practical Software Verification: LASER, International Summer School 2011, Elba Island, Italy, Revised Tutorial Lectures",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--30",
abstract="Model checking is an automatic verification technique for hardware and software systems that are finite state or have finite state abstractions. It has been used successfully to verify computer hardware, and it is beginning to be used to verify computer software as well. As the number of state variables in the system increases, the size of the system state space grows exponentially. This is called the ``state explosion problem''. Much of the research in model checking over the past 30 years has involved developing techniques for dealing with this problem. In these lecture notes, we will explain how the basic model checking algorithms work and describe some recent approaches to the state explosion problem, with an emphasis on Bounded Model Checking.",
isbn="978-3-642-35746-6",
doi="10.1007/978-3-642-35746-6_1",
url="https://doi.org/10.1007/978-3-642-35746-6_1"
}

@incollection{clarke2012statespace,
    title={Model Checking and the State Explosion Problem},
    author={Clarke E, Klieber W},
    booktitle={Tools for Practical Software Verification},
    year={2012},
    publisher={Springer},
    howpublished={\url{https://doi.org/10.1007/978-3-642-35746-6_1}}
}

@InProceedings{	  kirszenberg.21.spin,
  author	= {Alexandre Kirszenberg and Antoine Martin and Hugo Moreau
		  and Etienne Renault},
  title		= {{Go2Pins}: {A} Framework for the {LTL} Verification of
		  {Go} Programs},
  booktitle	= {Proceedings of the 27th International SPIN Symposium on
		  Model Checking of Software (SPIN'21)},
  year		= {2021},
  series	= {Lecture Notes in Computer Science},
  volume	= {12864},
  month		= may,
  address	= {Aarhus, Denmark (online)},
  publisher	= {Springer, Cham},
  pages		= {140--156},
  abstract	= {We introduce Go2Pins, a tool that takes a program written
		  in Go and links it with two model-checkers: LTSMin [19] and
		  Spot [7]. Go2Pins is an effort to promote the integration
		  of both formal verifica- tion and testing inside
		  industrial-size projects. With this goal in mind, we
		  introduce black-box transitions, an efficient and scalable
		  technique for handling the Go runtime. This approach,
		  inspired by hardware ver- ification techniques, allows
		  easy, automatic and efficient abstractions. Go2Pins also
		  handles basic concurrent programs through the use of a
		  dedicated scheduler. In this paper we demonstrate the usage
		  of Go2Pins over benchmarks inspired by industrial problems
		  and a set of LTL formulae. Even if Go2Pins is still at the
		  early stages of development, our results are promising and
		  show the the benefits of using black-box transitions.},
  doi		= {10.1007/978-3-030-84629-9_8}
}

@online{go:introduction,
 author = {Griesemer, Robert and Pike, Rob and Thompson, Ken and
                  Taylor, Ian and Cox, Russ and Kim, Jini and Langley,
                  Adam},
 title = "Hey! Ho! Let's Go!",
 year = 2009,
 howpublished = {\url{https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html}},
 note = {Accessed: 2019-07-03}
}

@inproceedings{kant.2015,
  title={LTSmin: high-performance language-independent model checking},
  author={Kant, Gijs and Laarman, Alfons and Meijer, Jeroen and van de
                  Pol, Jaco and Blom, Stefan and van Dijk, Tom},
  booktitle={International Conference on Tools and Algorithms for the
                  Construction and Analysis of Systems},
  pages={692--707},
  year={2015},
  organization={Springer}
}

@incollection{vardi1996automata,
  title={An automata-theoretic approach to linear temporal logic},
  author={Vardi, Moshe Y},
  booktitle={Logics for concurrency},
  pages={238--266},
  year={1996},
  publisher={Springer}
}

@incollection{kripke1963structure,
  title={Semantical Considerations on Modal Logic},
  author={Kripke, Saul},
  booktitle={Acta Philosophica Fennica, 16},
  pages={83--94},
  year={1963},
}

@inproceedings{duret.16.atva2,
  author = {Alexandre Duret-Lutz and Alexandre Lewkowicz and Amaury
		  Fauchille and Thibaud Michaud and Etienne Renault and
		  Laurent Xu},
  title = {Spot 2.0 --- a framework for {LTL} and $\omega$-automata
		  manipulation},
  booktitle = {Proceedings of the 14th International Symposium on
		  Automated Technology for Verification and Analysis
		  (ATVA'16)},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  volume = {9938},
  pages = {122--129},
  year = {2016},
  month = oct,
}

@Inbook{Alur2018,
author="Alur, Rajeev
and Bouajjani, Ahmed
and Esparza, Javier",
editor="Clarke, Edmund M.
and Henzinger, Thomas A.
and Veith, Helmut
and Bloem, Roderick",
title="Model Checking Procedural Programs",
bookTitle="Handbook of Model Checking",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="541--572",
abstract="We consider the model-checking problem for sequential programs with procedure calls. We first present basic algorithms for solving the reachability problem and the fair computation problem. The algorithms are based on two techniques: summarization, which computes reachability information by solving a set of fixpoint equations, and saturation, which computes the set of all reachable program states (including call stacks) using automata. Then, we study formalisms to specify requirements of programs with procedure calls. We present an extension of Linear Temporal Logic allowing propagation of information across the hierarchical structure induced by procedure calls and matching returns. Finally, we show how model checking can be extended to this class of programs and properties.",
isbn="978-3-319-10575-8",
doi="10.1007/978-3-319-10575-8_17",
url="https://doi.org/10.1007/978-3-319-10575-8_17"
}

@inproceedings{kant.15.tacas,
author = {Kant, Gijs and Laarman, Alfons and Meijer, Jeroen and  van de Pol, Jaco and Blom, Stefan and van Dijk, Tom},
year = {2015},
month = {April},
pages = {692--707},
 booktitle	= {Proceedings of the fifteen International Conference on
		  Tools and Algorithms for the Construction and Analysis of
		  Systems (TACAS'15)},
title = {LTSmin: High-Performance Language-Independent Model Checking},
doi = {10.1007/978-3-662-46681-0_61},
}

@misc{rers,
  title = {Rigorous Examination of Reactive Systems ({RERS})},
  howpublished = {\url{http://rers-challenge.org/2019/}},
  year = {2019},
  key = {{RERS challenge}},
}

@inproceedings{ltl,
    title= {The temporal logic of branching time.},
    year= {1983},
    author={Ben-Ari M., Pnueli A.,  Manna Z.},
    booktitle={Acta Informatica 20},
    pages={ 207â€“-226},
    howpublished={https://doi.org/10.1007/BF01257083},
}

@misc{goroutines,
  title = {Goroutines},
  howpublished = {\url{https://tour.golang.org/concurrency/1}},
  year = {2009},
  key = {{goroutines}},
}

@misc{spin,
  title = {SPIN},
  howpublished = {\url{https://conf.researchr.org/home/spin-2021}},
  year = {2021},
  key = {{SPIN}},
}
